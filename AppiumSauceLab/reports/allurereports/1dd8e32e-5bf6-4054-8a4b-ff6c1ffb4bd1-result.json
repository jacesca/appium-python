{"name": "test_contact2_fill_form", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: Uh oh, you've run out of minutes!\nPlease visit https://saucelabs.com/pricing to purchase a subscription.", "trace": "request = <SubRequest 'before_class' for <TestCaseFunction test_contact1_open_form>>\n\n    @pytest.fixture(scope='class')\n    def before_class(request):\n        print('\\nStarting suit test cases...')\n        # driver = CustomDriver().get_local_driver()    # Local driver\n>       driver = CustomDriver().get_cloud_driver()    # Cloud driver\n\ntests/conftest.py:10: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbase/DriverClass.py:122: in get_cloud_driver\n    driver = webdriver.Remote(\n/opt/anaconda3/envs/appium/lib/python3.13/site-packages/appium/webdriver/webdriver.py:227: in __init__\n    super().__init__(\n/opt/anaconda3/envs/appium/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:241: in __init__\n    self.start_session(capabilities)\n/opt/anaconda3/envs/appium/lib/python3.13/site-packages/appium/webdriver/webdriver.py:319: in start_session\n    response = self.execute(RemoteCommand.NEW_SESSION, w3c_caps)\n/opt/anaconda3/envs/appium/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x107d912b0>\nresponse = {'status': 402, 'value': \"Uh oh, you've run out of minutes!\\nPlease visit https://saucelabs.com/pricing to purchase a subscription.\"}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n>           raise exception_class(value)\nE           selenium.common.exceptions.WebDriverException: Message: Uh oh, you've run out of minutes!\nE           Please visit https://saucelabs.com/pricing to purchase a subscription.\n\n/opt/anaconda3/envs/appium/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:196: WebDriverException"}, "start": 1739288758561, "stop": 1739288758561, "uuid": "9f6008c9-c441-419b-bb56-c369b9b12cab", "historyId": "adad579ed9fdfda6f93407a05694e31d", "testCaseId": "adad579ed9fdfda6f93407a05694e31d", "fullName": "tests.test_contactform.ContactFormTest#test_contact2_fill_form", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('before_class', 'before_method')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_contactform"}, {"name": "subSuite", "value": "ContactFormTest"}, {"name": "host", "value": "MBSVLCDISHPH65T.local"}, {"name": "thread", "value": "98564-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_contactform"}]}