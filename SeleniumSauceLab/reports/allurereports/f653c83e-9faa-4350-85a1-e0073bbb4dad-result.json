{"name": "test_cf1_displayedform", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <pages.ContactFormPage.ContactForm object at 0x1032eb390>, locator_value = 'Form'\nlocator_type = 'link_text'\n\n    def click_on_element(self, locator_value: str, locator_type: LocatorType = 'id') -> None:   # noqa\n        try:\n            web_element = self.wait_for_element(locator_value, locator_type)\n>           web_element.click()\n\nbase/BasePage.py:132: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/anaconda3/envs/appium/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/anaconda3/envs/appium/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n/opt/anaconda3/envs/appium/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1034c92b0>\nresponse = {'status': 400, 'value': '{\"value\": {\"stacktrace\": \"0   chromedriver                        0x000000010e6f9ad8 chromed... not clickable at point (-125, 340)\\\\n  (Session info: chrome=131.0.6778.70)\", \"error\": \"element click intercepted\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (-125, 340)\nE         (Session info: chrome=131.0.6778.70)\nE       Stacktrace:\nE       0   chromedriver                        0x000000010e6f9ad8 chromedriver + 7105240\nE       1   chromedriver                        0x000000010e6f1a7a chromedriver + 7072378\nE       2   chromedriver                        0x000000010e094d80 chromedriver + 400768\nE       3   chromedriver                        0x000000010e0eab16 chromedriver + 752406\nE       4   chromedriver                        0x000000010e0e8a68 chromedriver + 744040\nE       5   chromedriver                        0x000000010e0e61b5 chromedriver + 733621\nE       6   chromedriver                        0x000000010e0e53b2 chromedriver + 730034\nE       7   chromedriver                        0x000000010e0d8b1d chromedriver + 678685\nE       8   chromedriver                        0x000000010e108432 chromedriver + 873522\nE       9   chromedriver                        0x000000010e0d8458 chromedriver + 676952\nE       10  chromedriver                        0x000000010e1085ee chromedriver + 873966\nE       11  chromedriver                        0x000000010e1273be chromedriver + 1000382\nE       12  chromedriver                        0x000000010e1081d3 chromedriver + 872915\nE       13  chromedriver                        0x000000010e0d6762 chromedriver + 669538\nE       14  chromedriver                        0x000000010e0d773e chromedriver + 673598\nE       15  chromedriver                        0x000000010e6bfb60 chromedriver + 6867808\nE       16  chromedriver                        0x000000010e6c3a90 chromedriver + 6883984\nE       17  chromedriver                        0x000000010e6a18c7 chromedriver + 6744263\nE       18  chromedriver                        0x000000010e6c451e chromedriver + 6886686\nE       19  chromedriver                        0x000000010e690fc4 chromedriver + 6676420\nE       20  chromedriver                        0x000000010e6e01d8 chromedriver + 7000536\nE       21  chromedriver                        0x000000010e6e0396 chromedriver + 7000982\nE       22  chromedriver                        0x000000010e6f1658 chromedriver + 7071320\nE       23  libsystem_pthread.dylib             0x00007ff8114a91d3 _pthread_start + 125\nE       24  libsystem_pthread.dylib             0x00007ff8114a4bd3 thread_start + 15\n\n/opt/anaconda3/envs/appium/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_contactform.ContactFormTest testMethod=test_cf1_displayedform>\n\n    def test_cf1_displayedform(self):\n        cl.allureLogs('Web Site Opened.')\n>       self.cf.click_on_form_menu_option()\n\ntests/test_contactform.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/ContactFormPage.py:23: in click_on_form_menu_option\n    self.click_on_element(locator_value=self._menu_form_link,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.ContactFormPage.ContactForm object at 0x1032eb390>, locator_value = 'Form'\nlocator_type = 'link_text'\n\n    def click_on_element(self, locator_value: str, locator_type: LocatorType = 'id') -> None:   # noqa\n        try:\n            web_element = self.wait_for_element(locator_value, locator_type)\n            web_element.click()\n            self.logger.info(\n                f'Clicked on web element with locator type: `{locator_type}` '\n                f'and locator value: `{locator_value}`.'\n            )\n        except Exception as e:\n            self._log_exception(\n                custom_msg='Unable to click on web element with locator type: '\n                           f'`{locator_type}` and locator value: '\n                           f'`{locator_value}`',\n                error_msg=str(e)\n            )\n            self.attach_screenshot(f\"click_element_{locator_type}\")\n>           assert False\nE           AssertionError\n\nbase/BasePage.py:145: AssertionError"}, "steps": [{"name": "Web Site Opened.", "status": "passed", "start": 1735449759326, "stop": 1735449759326}], "attachments": [{"name": "screenshots/click_element_link_text_2024_12_28_23_22_40.png", "source": "b67541c5-cd10-46d4-826f-8c26d1574c01-attachment.png", "type": "image/png"}, {"name": "log", "source": "1f88e38e-edb4-4c0c-b08f-cedb21a582e3-attachment.txt", "type": "text/plain"}], "start": 1735449759325, "stop": 1735449761843, "uuid": "fbf9d9f8-6fa9-45a1-abcc-1431988b80fc", "historyId": "a9119d9fdb4e40e789ab174f621f1606", "testCaseId": "a9119d9fdb4e40e789ab174f621f1606", "fullName": "tests.test_contactform.ContactFormTest#test_cf1_displayedform", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('before_class', 'before_method')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_contactform"}, {"name": "subSuite", "value": "ContactFormTest"}, {"name": "host", "value": "MBSVLCDISHPH65T.local"}, {"name": "thread", "value": "71978-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_contactform"}]}