{"name": "test_cf2_fillform", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <pages.ContactFormPage.ContactForm object at 0x1062ba5d0>, locator_value = 'name'\nlocator_type = 'id'\n\n    def wait_for_element(self, locator_value: str, locator_type: LocatorType = 'id') -> WebElement:   # noqa\n        try:\n            locator_by = self._get_locator_type(locator_type)\n>           web_element = self.wait.until(\n                EC.presence_of_element_located((locator_by, locator_value))\n            )\n\nbase/BasePage.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"b612fa75ad8b4cf3a87cea673885bf2d\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x1062af740>\nmessage = ''\n\n    def until(self, method: Callable[[WebDriver], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       0   chromedriver                        0x00000001045a5ad8 chromedriver + 7105240\nE       1   chromedriver                        0x000000010459da7a chromedriver + 7072378\nE       2   chromedriver                        0x0000000103f40d80 chromedriver + 400768\nE       3   chromedriver                        0x0000000103f8fdc3 chromedriver + 724419\nE       4   chromedriver                        0x0000000103f900d1 chromedriver + 725201\nE       5   chromedriver                        0x0000000103fd60e4 chromedriver + 1011940\nE       6   chromedriver                        0x0000000103fb445d chromedriver + 873565\nE       7   chromedriver                        0x0000000103fd33be chromedriver + 1000382\nE       8   chromedriver                        0x0000000103fb41d3 chromedriver + 872915\nE       9   chromedriver                        0x0000000103f82762 chromedriver + 669538\nE       10  chromedriver                        0x0000000103f8373e chromedriver + 673598\nE       11  chromedriver                        0x000000010456bb60 chromedriver + 6867808\nE       12  chromedriver                        0x000000010456fa90 chromedriver + 6883984\nE       13  chromedriver                        0x000000010454d8c7 chromedriver + 6744263\nE       14  chromedriver                        0x000000010457051e chromedriver + 6886686\nE       15  chromedriver                        0x000000010453cfc4 chromedriver + 6676420\nE       16  chromedriver                        0x000000010458c1d8 chromedriver + 7000536\nE       17  chromedriver                        0x000000010458c396 chromedriver + 7000982\nE       18  chromedriver                        0x000000010459d658 chromedriver + 7071320\nE       19  libsystem_pthread.dylib             0x00007ff80b47e1d3 _pthread_start + 125\nE       20  libsystem_pthread.dylib             0x00007ff80b479bd3 thread_start + 15\n\n/opt/anaconda3/envs/appium/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:101: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <pages.ContactFormPage.ContactForm object at 0x1062ba5d0>, text = 'Code2Lead'\nlocator_value = 'name', locator_type = 'id'\n\n    def send_text(self, text: str, locator_value: str, locator_type: LocatorType = 'id') -> None:   # noqa\n        try:\n>           web_element = self.wait_for_element(locator_value, locator_type)\n\nbase/BasePage.py:149: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.ContactFormPage.ContactForm object at 0x1062ba5d0>, locator_value = 'name'\nlocator_type = 'id'\n\n    def wait_for_element(self, locator_value: str, locator_type: LocatorType = 'id') -> WebElement:   # noqa\n        try:\n            locator_by = self._get_locator_type(locator_type)\n            web_element = self.wait.until(\n                EC.presence_of_element_located((locator_by, locator_value))\n            )\n            self.logger.info(\n                'Web element (wait approach) found with locator type: '\n                f'`{locator_type}` and locator value: `{locator_value}`.'\n            )\n            return web_element\n        except Exception as e:\n            self._log_exception(\n                custom_msg='Web element (wait approach) not found with locator'\n                           f' type: `{locator_type}` and locator value: '\n                           f'`{locator_value}`',\n                error_msg=str(e)\n            )\n            self.attach_screenshot(f\"wait_for_element_{locator_type}\")\n>           assert False\nE           AssertionError\n\nbase/BasePage.py:127: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_contactform.ContactFormTest testMethod=test_cf2_fillform>\n\n    def test_cf2_fillform(self):\n>       self.cf.enter_name()\n\ntests/test_contactform.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/ContactFormPage.py:33: in enter_name\n    self.send_text(text='Code2Lead',\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.ContactFormPage.ContactForm object at 0x1062ba5d0>, text = 'Code2Lead'\nlocator_value = 'name', locator_type = 'id'\n\n    def send_text(self, text: str, locator_value: str, locator_type: LocatorType = 'id') -> None:   # noqa\n        try:\n            web_element = self.wait_for_element(locator_value, locator_type)\n            web_element.send_keys(text)\n            self.logger.info(\n                f'Text `{text}` send on web element with locator type: '\n                f'`{locator_type}` and locator value: `{locator_value}`.'\n            )\n        except Exception as e:\n            self._log_exception(\n                custom_msg=f'Unable to send text `{text}` on web element with '\n                           f'locator type: `{locator_type}` and locator value:'\n                           f' `{locator_value}`',\n                error_msg=str(e)\n            )\n            self.attach_screenshot(f\"send_text_{locator_type}\")\n>           assert False\nE           AssertionError\n\nbase/BasePage.py:163: AssertionError"}, "attachments": [{"name": "screenshots/wait_for_element_id_2024_12_28_23_17_46.png", "source": "7d1c2a05-b80a-41b9-9ef6-41fd28dde0d6-attachment.png", "type": "image/png"}, {"name": "screenshots/send_text_id_2024_12_28_23_17_47.png", "source": "efb7d2df-7d01-4465-91ef-a1b76ff83b55-attachment.png", "type": "image/png"}, {"name": "log", "source": "3754f362-1906-4271-a68b-9f21f3095edf-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "4179e79c-db3b-405a-bc12-5dc4bbd7e3e8-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "a5ed0e3e-dad7-4307-963d-36f8c01b8ad2-attachment.txt", "type": "text/plain"}], "start": 1735449440762, "stop": 1735449468348, "uuid": "97712837-7bea-4d88-9282-72a880db659a", "historyId": "db20e6a15add8982b171b5edcd36fecd", "testCaseId": "db20e6a15add8982b171b5edcd36fecd", "fullName": "tests.TestSuitRegression.ContactFormTest#test_cf2_fillform", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('before_class', 'before_method')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "TestSuitRegression"}, {"name": "subSuite", "value": "ContactFormTest"}, {"name": "host", "value": "MBSVLCDISHPH65T.local"}, {"name": "thread", "value": "71846-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.TestSuitRegression"}]}